// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user-post.proto

package user_post

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for UserPost service

func NewUserPostEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for UserPost service

type UserPostService interface {
	MakeComment(ctx context.Context, in *MakeCommentRequest, opts ...client.CallOption) (*Response, error)
	DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...client.CallOption) (*Response, error)
	GetCommentOfPost(ctx context.Context, in *GetCommentOfPostRequest, opts ...client.CallOption) (*CommentOfPostResponse, error)
	GetCommentOfUser(ctx context.Context, in *GetCommentOfUserRequest, opts ...client.CallOption) (*CommentOfUserResponse, error)
	MakeLike(ctx context.Context, in *MakeLikeRequest, opts ...client.CallOption) (*Response, error)
	CancelLike(ctx context.Context, in *CancelLikeRequest, opts ...client.CallOption) (*Response, error)
}

type userPostService struct {
	c    client.Client
	name string
}

func NewUserPostService(name string, c client.Client) UserPostService {
	return &userPostService{
		c:    c,
		name: name,
	}
}

func (c *userPostService) MakeComment(ctx context.Context, in *MakeCommentRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserPost.MakeComment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostService) DeleteComment(ctx context.Context, in *DeleteCommentRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserPost.DeleteComment", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostService) GetCommentOfPost(ctx context.Context, in *GetCommentOfPostRequest, opts ...client.CallOption) (*CommentOfPostResponse, error) {
	req := c.c.NewRequest(c.name, "UserPost.GetCommentOfPost", in)
	out := new(CommentOfPostResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostService) GetCommentOfUser(ctx context.Context, in *GetCommentOfUserRequest, opts ...client.CallOption) (*CommentOfUserResponse, error) {
	req := c.c.NewRequest(c.name, "UserPost.GetCommentOfUser", in)
	out := new(CommentOfUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostService) MakeLike(ctx context.Context, in *MakeLikeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserPost.MakeLike", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userPostService) CancelLike(ctx context.Context, in *CancelLikeRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "UserPost.CancelLike", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserPost service

type UserPostHandler interface {
	MakeComment(context.Context, *MakeCommentRequest, *Response) error
	DeleteComment(context.Context, *DeleteCommentRequest, *Response) error
	GetCommentOfPost(context.Context, *GetCommentOfPostRequest, *CommentOfPostResponse) error
	GetCommentOfUser(context.Context, *GetCommentOfUserRequest, *CommentOfUserResponse) error
	MakeLike(context.Context, *MakeLikeRequest, *Response) error
	CancelLike(context.Context, *CancelLikeRequest, *Response) error
}

func RegisterUserPostHandler(s server.Server, hdlr UserPostHandler, opts ...server.HandlerOption) error {
	type userPost interface {
		MakeComment(ctx context.Context, in *MakeCommentRequest, out *Response) error
		DeleteComment(ctx context.Context, in *DeleteCommentRequest, out *Response) error
		GetCommentOfPost(ctx context.Context, in *GetCommentOfPostRequest, out *CommentOfPostResponse) error
		GetCommentOfUser(ctx context.Context, in *GetCommentOfUserRequest, out *CommentOfUserResponse) error
		MakeLike(ctx context.Context, in *MakeLikeRequest, out *Response) error
		CancelLike(ctx context.Context, in *CancelLikeRequest, out *Response) error
	}
	type UserPost struct {
		userPost
	}
	h := &userPostHandler{hdlr}
	return s.Handle(s.NewHandler(&UserPost{h}, opts...))
}

type userPostHandler struct {
	UserPostHandler
}

func (h *userPostHandler) MakeComment(ctx context.Context, in *MakeCommentRequest, out *Response) error {
	return h.UserPostHandler.MakeComment(ctx, in, out)
}

func (h *userPostHandler) DeleteComment(ctx context.Context, in *DeleteCommentRequest, out *Response) error {
	return h.UserPostHandler.DeleteComment(ctx, in, out)
}

func (h *userPostHandler) GetCommentOfPost(ctx context.Context, in *GetCommentOfPostRequest, out *CommentOfPostResponse) error {
	return h.UserPostHandler.GetCommentOfPost(ctx, in, out)
}

func (h *userPostHandler) GetCommentOfUser(ctx context.Context, in *GetCommentOfUserRequest, out *CommentOfUserResponse) error {
	return h.UserPostHandler.GetCommentOfUser(ctx, in, out)
}

func (h *userPostHandler) MakeLike(ctx context.Context, in *MakeLikeRequest, out *Response) error {
	return h.UserPostHandler.MakeLike(ctx, in, out)
}

func (h *userPostHandler) CancelLike(ctx context.Context, in *CancelLikeRequest, out *Response) error {
	return h.UserPostHandler.CancelLike(ctx, in, out)
}
