// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user.proto

package user

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "go-micro.dev/v4/api"
	client "go-micro.dev/v4/client"
	server "go-micro.dev/v4/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewUserEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for User service

type UserService interface {
	UserLogin(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error)
	GetUserProfile(ctx context.Context, in *Request, opts ...client.CallOption) (*UserProfileResponse, error)
	UpdateUserProfile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*Response, error)
	GetBatchUserProfile(ctx context.Context, in *BatchUserProfileRequest, opts ...client.CallOption) (*BatchUserProfileResponse, error)
	MakeFeedback(ctx context.Context, in *MakeFeedbackRequest, opts ...client.CallOption) (*Response, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) UserLogin(ctx context.Context, in *LoginRequest, opts ...client.CallOption) (*LoginResponse, error) {
	req := c.c.NewRequest(c.name, "User.UserLogin", in)
	out := new(LoginResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserProfile(ctx context.Context, in *Request, opts ...client.CallOption) (*UserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetUserProfile", in)
	out := new(UserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdateUserProfile(ctx context.Context, in *UserProfileRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.UpdateUserProfile", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetBatchUserProfile(ctx context.Context, in *BatchUserProfileRequest, opts ...client.CallOption) (*BatchUserProfileResponse, error) {
	req := c.c.NewRequest(c.name, "User.GetBatchUserProfile", in)
	out := new(BatchUserProfileResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) MakeFeedback(ctx context.Context, in *MakeFeedbackRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.MakeFeedback", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	UserLogin(context.Context, *LoginRequest, *LoginResponse) error
	GetUserProfile(context.Context, *Request, *UserProfileResponse) error
	UpdateUserProfile(context.Context, *UserProfileRequest, *Response) error
	GetBatchUserProfile(context.Context, *BatchUserProfileRequest, *BatchUserProfileResponse) error
	MakeFeedback(context.Context, *MakeFeedbackRequest, *Response) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		UserLogin(ctx context.Context, in *LoginRequest, out *LoginResponse) error
		GetUserProfile(ctx context.Context, in *Request, out *UserProfileResponse) error
		UpdateUserProfile(ctx context.Context, in *UserProfileRequest, out *Response) error
		GetBatchUserProfile(ctx context.Context, in *BatchUserProfileRequest, out *BatchUserProfileResponse) error
		MakeFeedback(ctx context.Context, in *MakeFeedbackRequest, out *Response) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) UserLogin(ctx context.Context, in *LoginRequest, out *LoginResponse) error {
	return h.UserHandler.UserLogin(ctx, in, out)
}

func (h *userHandler) GetUserProfile(ctx context.Context, in *Request, out *UserProfileResponse) error {
	return h.UserHandler.GetUserProfile(ctx, in, out)
}

func (h *userHandler) UpdateUserProfile(ctx context.Context, in *UserProfileRequest, out *Response) error {
	return h.UserHandler.UpdateUserProfile(ctx, in, out)
}

func (h *userHandler) GetBatchUserProfile(ctx context.Context, in *BatchUserProfileRequest, out *BatchUserProfileResponse) error {
	return h.UserHandler.GetBatchUserProfile(ctx, in, out)
}

func (h *userHandler) MakeFeedback(ctx context.Context, in *MakeFeedbackRequest, out *Response) error {
	return h.UserHandler.MakeFeedback(ctx, in, out)
}
